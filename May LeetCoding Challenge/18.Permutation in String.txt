





Permutation in String
Solution
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

Solution:
class Solution {
     public boolean checkInclusion(String p, String s) {
        int[]ss = new int[26];
        int[]pp = new int[26];
        for (char c: p.toCharArray())
            pp[c-'a']++;
        int n=p.length();

        for (int i=0; i<s.length(); i++){
            char c=s.charAt(i);
            if (i>=n){
                ss[s.charAt(i-n)-'a']--;
            }
            ss[c-'a']++;
            if (Arrays.equals(ss,pp))
                return true;
        }

        return false;

    }
}