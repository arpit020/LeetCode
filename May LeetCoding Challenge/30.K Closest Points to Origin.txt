 K Closest Points to Origin
Solution
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance.)
You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)
Example 1:
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:
1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

class Solution {
     public int[][] kClosest(int[][] points, int K) {

        PriorityQueue<queue> qq=new PriorityQueue<>(new Sort());
        for(int i=0;i<points.length;i++){
            int x=points[i][0];
            int y=points[i][1];
            int k=(x*x+y*y);
            qq.add(new queue(x,y,k));
        }
        int ans[][]=new int[K][2];
        int i=0;
        while (K-->0){
            queue aa=qq.poll();
            ans[i][0]=aa.x;
            ans[i][1]=aa.y;
            i++;
        }
        return ans;
    }

    class queue{
        int x;
        int y;
        int distance;
        queue(int x,int y,int distance){
            this.x=x;
            this.y=y;
            this.distance=distance;
        }
    }
    class Sort implements Comparator<queue>{
        @Override
        public int compare(queue o1, queue o2) {
            return o1.distance-o2.distance;
        }
    }
}

Method2:
class Solution {
    public int[][] kClosest(int[][] points, int K) {
       int N = points.length;
        int[] distance = new int[N];
        
        //Fill in all the squared distances for each inout point
        for (int i = 0; i < N; ++i)
            distance[i] = calculatedistance(points[i]);

        //Sort the calculated square distances
        Arrays.sort(distance);
        
        // get only K or less than K distance
        int distK = distance[K-1];

        int[][] ans = new int[K][2];
        int t = 0;
        
        // Iterate over input list again and get only K values and store it in result.
        for (int i = 0; i < N; ++i)
            if (calculatedistance(points[i]) <= distK)
                ans[t++] = points[i];
        return ans;
    }

    public int calculatedistance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }

}