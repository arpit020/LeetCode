Implement Trie (Prefix Tree)
Solution
Implement a trie with insert, search, and startsWith methods.
Example:
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:
You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.
Solution:
class Trie {
    Trie array[];
    int end;
    /** Initialize your data structure here. */
    public Trie() {
        array=new Trie[26];
        end=0;
    }

    Trie head;

    /** Inserts a word into the trie. */
    public void insert(String word) {
        if (head==null){
            head=new Trie();
        }
        Trie current=head;
        for(char c:word.toCharArray()){
            Trie kk;
            int a=c-'a';
            if(current.array[a]!=null){
                kk=current.array[a];
            }else {
                kk=new Trie();
                current.array[a]=kk;
            }
            current=kk;
        }
        current.end=1;
    }
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        if(head==null){
            return false;
        }
        Trie current=head;
        for(char c:word.toCharArray()){
            int a=c-'a';
            if(current.array[a]==null){
                return false;
            }
            current=current.array[a];

        }
        if(current.end==1){
            return true;
        }
        return false;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        if(head==null){
            return false;
        }
        Trie current=head;
        for(char c:prefix.toCharArray()){
            int a=c-'a';
            if(current.array[a]==null){
                return false;
            }
            current=current.array[a];

        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */