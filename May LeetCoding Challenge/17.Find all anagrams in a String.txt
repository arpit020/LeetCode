Find All Anagrams in a String
Solution
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.
Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
Method 1:-passed 34/36
class Solution {
     List<Integer> findAnagrams(String s, String p) {
        List<Integer> list=new ArrayList<>();
        int s1=s.length();
        int p1=p.length();
        for(int i=0;i+p1<=s1;i++){
            if(function(p,s.substring(i,i+p1))){
                list.add(i);
            }
        }
        return list;
    }

    boolean function(String s1,String s2){
        HashMap<Character,Integer> map=new HashMap<>();
        for(char c:s1.toCharArray()){
            map.put(c,map.getOrDefault(c,0)+1);
        }
        for(char c:s2.toCharArray()){
            if(map.get(c)==null){
                return false;
            }
            int k=map.get(c);
            if(k-1<0){
                return false;
            }
            map.put(c,k-1);
        }
        return true;
    }
    
}


Then i optimised my code little bit to decrease the time complexity:

Method 2:
class Solution {
    public  List<Integer> findAnagrams(String s, String p) {
         if(s.length()==0 || s.length()<p.length()){
            return new ArrayList<>();
        }
        List<Integer> list=new ArrayList<>();
        int s1=s.length();
        int p1=p.length();

        int pattern[]=new int[26];
        int str[]=new int[26];
        for(int i=0;i<p.length();i++){
            str[s.charAt(i)-'a']++;
            pattern[p.charAt(i)-'a']++;
        }
        if(function(pattern,str)){
            list.add(0);
        }
        for(int i=1;i+p1<=s1;i++){
            str[s.charAt(i-1)-'a']--;
            str[s.charAt(i+p1-1)-'a']++;
            if(function(pattern,str)){
                list.add(i);
            }
        }
        return list;
    }

     boolean function(int pattern[],int Str[]){
        for(int i=0;i<26;i++){
            if(pattern[i]!=Str[i]){
                return false;
            }
        }
        return true;
    }
}



Method 3:
class Solution {
   
    public List<Integer> findAnagrams(String s, String p) {
        int[]ss = new int[26];
        int[]pp = new int[26];
        
        for (char c: p.toCharArray())
            pp[c-'a']++;
        int n=p.length();
        List<Integer>res = new ArrayList<>();
        
        for (int i=0; i<s.length(); i++){
            char c=s.charAt(i);
            if (i>=n){
                ss[s.charAt(i-n)-'a']--;
            }
            ss[c-'a']++;
            if (Arrays.equals(ss,pp))
                res.add(i-n+1);
        }
        
        return res;
    }
}
