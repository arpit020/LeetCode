
Single Element in a Sorted Array
Solution
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.
Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.

class Solution {
   public int singleNonDuplicate(int[] nums) {
       if(nums.length==1){
           return nums[0];
       }
        
        return single(nums,0,nums.length-1);
    }

    public int single(int[] nums,int start,int end){
    
        if(start>end){
            return -1;
        }
        int mid=end+(start-end)/2;
        if(mid%2==0){
            if (mid+1<=nums.length-1 && nums[mid]==nums[mid+1]){
                return single(nums,mid+2,end);
            }
            else if(mid-1>=0 && nums[mid]==nums[mid-1]){
                return single(nums,start,mid-2);
            }else {
                return nums[mid];
            }
        }else {
            if (nums[mid]==nums[mid-1]){
                return single(nums,mid+1,end);
            }else {
                return single(nums,start,mid-1);
            }
        }

    }
}