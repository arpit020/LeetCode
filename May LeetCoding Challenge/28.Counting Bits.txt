

Counting Bits
Solution
Given a non negative integer number num. For every numbers i in the range 0 = i = num calculate the number of 1's in their binary representation and return them as an array.
Example 1:
Input: 2
Output: [0,1,1]
Example 2:
Input: 5
Output: [0,1,1,2,1,2]
Follow up:
It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.
class Solution {
    public int[] countBits(int num) {
        if(num==0){
            return new int[]{0};
        }
        if(num==1){
            return new int[]{0,1};
        }
        
        int ans[]=new int[num+1];
        ans[1]=1;
        ans[2]=1;
        int power=2;
        for(int i=3;i<=num;i++){
            if((i&(i-1))==0){
                ans[i]=1;
                power=i;
            }else {
                ans[i]=1+ans[i-power];
            }
        }
        return ans;
        
    }
}